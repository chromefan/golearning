package main

import (
	"encoding/json"
	"fmt"
	"github.com/julienschmidt/httprouter"
	"github.com/panjf2000/ants"
	"io/ioutil"
	"log"
	"net/http"
	"time"
)

var ch = make(chan []byte)

type Request struct {
	Param  []byte
	Result chan []byte
}

func main() {

	router := httprouter.New()
	router.GET("/", antiWorld)

	log.Fatal(http.ListenAndServe(":8089", router))
}

type JsonResponse struct {
	Error    int    `json:"error"`
	ErrorMsg string `json:"error_msg"`
}

func antiWorld(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {

	pool, _ := ants.NewPoolWithFunc(10, func(payload interface{}) {
		request, _ := payload.(*Request)
		reverseParam := func(s []byte) []byte {
			for i, j := 0, len(s)-1; i < j; i, j = i+1, j-1 {
				s[i], s[j] = s[j], s[i]
			}
			return s
		}(request.Param)
		fmt.Printf("正在http请求%s 还有1秒钟....\n", r.URL.Query()["id"])
		time.Sleep(1 * time.Second)
		fmt.Printf("玩完了，下一个\n-----------------\n")
		log.Println(11)
		request.Result <- reverseParam

	})
	defer pool.Release()
	log.Println(r.RequestURI)
	param, err := ioutil.ReadAll(r.Body)
	//fmt.Println( "params"+string(param))
	if err != nil {
		http.Error(w, "request error", http.StatusInternalServerError)
	}
	defer r.Body.Close()
	request := &Request{Param: param, Result: make(chan []byte)}
	if err := pool.Invoke(request); err != nil {
		http.Error(w, "throttle limit error", http.StatusInternalServerError)
	}
	var response JsonResponse
	response.Error = 0
	response.ErrorMsg = "hello"
	w.Header().Set("Content-Type", "application/json;charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	if err := json.NewEncoder(w).Encode(response); err != nil {
		panic(err)
	}
	log.Println(22)
	w.Write(<-request.Result)
}
